    - name: Remove old container if exists
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent

    - name: Remove an old volume if exists
      community.docker.docker_volume:
        name: "{{ volume_name }}"
        state: absent

    - name: Validate if API url was defined
      assert:
        that: 
          - pathfinder_api_token_url  != 'not_defined'
        fail_msg: "Invalid API KEY provided"
        success_msg: "API KEY looks good!"

    - name: Version to checkout Init
      set_fact: checkout_version="{{ pathfinder_version }}"
    
    - block: 

        - name: Check latest version
          uri:
            url: "{{ pathfinder_githubapi_url }}"
            return_content: true
          register: pathfinder_latest

        - name: Define version to checkout
          set_fact: checkout_version="{{ pathfinder_latest.json.tag_name }}"

        
      when: pathfinder_version == 'latest'

    - name: Print latest checkout_version variable
      debug:
        msg: "{{ checkout_version }}"  


    - name: Git checkout
      ansible.builtin.git:
        repo: '{{ pathfinder_git_link }}'
        dest: "{{ pathfinder_git_name }}/"
        version: "{{ checkout_version }}"

    - name: 'Make Env file for compose image'
      lineinfile:
        path:  "{{ pathfinder_git_name }}/{{ env_file }}"
        create: yes
        line: "PATHFINDER_ETHEREUM_API_URL={{ pathfinder_api_token_url }}"

    - name: 'Make a directory for a volume'
      file:
        state: directory
        owner: 1000
        group: 1000
        path: "./{{ pathfinder_git_name }}/{{ pathfinder_git_name }}"


    - name: Tear down existing services
      community.docker.docker_compose:
        project_src: "{{ pathfinder_git_name }}/"
        state: absent

    - name: Create and start services
      community.docker.docker_compose:
        project_src: "{{ pathfinder_git_name }}/"
      register: output

    - ansible.builtin.debug:
        var: output
          